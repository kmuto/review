#!/usr/bin/env ruby
#
# $Id: review-vol 3901 2008-02-11 20:04:59Z aamine $
#
# Copyright (c) 2003-2014 Minero Aoki
#
# This program is free software.
# You can distribute or modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of the GNU LGPL, see the file "COPYING".
#

require 'pathname'

bindir = Pathname.new(__FILE__).realpath.dirname
$LOAD_PATH.unshift((bindir + '../lib').realpath)

require 'review'
require 'optparse'

include ReVIEW::TextUtils

def main
  $KCODE = 'UTF-8' unless defined?(Encoding)

  @config = ReVIEW::Configure.values
  @config.merge!({
    "inencoding" => "UTF-8",
    "outencoding" => "UTF-8"
  })

  part_sensitive = false
  basedir = nil
  opts = OptionParser.new
  opts.version = ReVIEW::VERSION
  opts.on('-P', '--part-sensitive', 'Prints volume of each parts.') {
    part_sensitive = true
  }
  opts.on('--inencoding=ENCODING', 'Set input encoding. (UTF-8, EUC, JIS, and SJIS)') {|enc|
    @config["inencoding"] = enc
  }
  opts.on('--outencoding=ENCODING', 'Set output encoding. (UTF-8[default], EUC, JIS, and SJIS)') {|enc|
    @config["outencoding"] = enc
  }
  opts.on('--directory=DIR', 'Compile all chapters in DIR.') {|path|
    basedir = path
  }
  opts.on('--help', 'Print this message and quit') {
    puts opts.help
    exit 0
  }
  begin
    opts.parse!
  rescue OptionParser::ParseError => err
    $stderr.puts err.message
    $stderr.puts opts.help
    exit 1
  end

  book = basedir ? ReVIEW::Book.load(basedir) : ReVIEW.book
  ReVIEW.book.config = @config
  if part_sensitive
    sep = ""
    book.each_part do |part|
      print sep; sep = "\n"
      puts "Part #{part.number} #{part.name}" if part.number
      part.each_chapter do |chap|
        print_chapter_volume chap
      end
      puts '    --------------------'
      print_volume part.volume
    end
    puts '============================='
    print_volume book.volume #puts "Total #{book.volume}"
  else
    book.each_chapter do |chap|
      print_chapter_volume chap
    end
    puts '============================='
    print_volume book.volume #puts "Total #{book.volume}"
  end
rescue ReVIEW::ApplicationError, Errno::ENOENT => err
  raise if $DEBUG
  $stderr.puts "#{File.basename($0)}: #{err.message}"
  exit 1
end

def print_chapter_volume(chap)
  vol = chap.volume
  title = convert_outencoding(chap.title, @config["outencoding"])
  printf "%s %3dKB %6dC %5dL %3dP %s %-s\n",
         chapnumstr(chap.number), vol.kbytes, vol.chars, vol.lines, vol.page,
         "#{chap.name} ".ljust(25, '.'), title
end

def print_volume(vol)
  printf "    %3dKB %6dC %5dL %3dP\n", vol.kbytes, vol.chars, vol.lines, vol.page
end

def chapnumstr(n)
  n ? sprintf('%2d.', n) : '   '
end

main
